{"version":3,"sources":["components/Header.js","components/NuevaTarea.js","components/Tareas.js","components/ListaTarea.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","stateInicial","tarea","home","fecha","cliente","error","NuevaTarea","state","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","nuevaTarea","id","uuid","props","crearNuevaTarea","this","onSubmit","type","placeholder","onChange","Component","Tareas","eliminarTarea","onClick","listaTareas","mensaje","Object","keys","length","map","key","App","tareas","datos","filter","tareasLS","localStorage","getItem","JSON","parse","setItem","stringify","ListaTarea","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43bfbb85.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = ({titulo}) => (\n    <header>\n        <h1 className=\"text-center\">{titulo}</h1>\n    </header>\n);\n\nexport default Header;","import React, {Component} from 'react';\nimport uuid from 'uuid';\n\n\nconst stateInicial = {\n    tarea: {\n        home : '',\n        fecha : '',\n        cliente: ''\n      },\n      error: false\n}\nclass NuevaTarea extends Component {\n\n  state = { ...stateInicial }\n\n  handleChange = (e) => {\n    // Setear en el state lo que el usuario escribe\n\n    this.setState({\n        tarea : {\n            ...this.state.tarea,\n            [e.target.name] : e.target.value\n        }\n    })\n  }\n\n  handleSubmit = (e) =>{\n    e.preventDefault();\n    \n\n    //extraer los valores del state\n    const {home, fecha, cliente } = this.state.tarea;\n    //validar que todos los campos esten llenos\n    if (home === '' || fecha === '' || cliente === '') {\n        this.setState({\n            error: true\n        });\n\n        //detener la ejecucci√≥n\n        return;\n    }\n\n    // generar objeto con los datos\n    const nuevaTarea = {...this.state.tarea}\n    nuevaTarea.id = uuid();\n    //agregar la cita al state de App\n    this.props.crearNuevaTarea(nuevaTarea);\n\n    this.setState({\n        ...stateInicial\n    })\n\n  }\n\n  render() {\n\n    // extraer valor del state\n\n    const { error } = this.state;\n    return(\n        <div className=\"card mt-5 py-5\">\n            <div className=\"card-body\">\n                <h2 className=\"card-title text center mb-5\">\n                    Llena el formulario para crear una nueva tarea\n                </h2>\n\n                {error ? <div className=\"alert alert-danger mt-2 mb-5 text-center\">Todos los campos son obligatorios!</div> : null}\n\n                <form\n                    onSubmit={this.handleSubmit}\n                >\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre de la tarea</label>\n                        <div className=\"col-sm-8 col-lg-10\">\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Nombre tarea\"\n                                name=\"home\"\n                                onChange={this.handleChange}\n                                value={this.state.tarea.home}\n                            />\n                        </div>\n                    </div> \n\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-lg-2 col-form-label\">Nombre del cliente</label>\n                        <div className=\"col-sm-8 col-lg-4\">\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Nombre del cliente\"\n                                name=\"cliente\"\n                                onChange={this.handleChange}\n                                value={this.state.tarea.cliente}\n                            />\n                        </div>\n                    </div> \n\n                    <div className=\"form-group row\">\n                        <label className=\"col-sm-4 col-lg-2 col-form-label\">Fecha de entrega</label>\n                        <div className=\"col-sm-8 col-lg-4\">\n                            <input\n                                type=\"date\"\n                                className=\"form-control\"\n                                name=\"fecha\"\n                                onChange={this.handleChange}\n                                value={this.state.tarea.fecha}\n                            />\n                        </div>\n                    </div> \n\n                    <input type=\"submit\" className=\"py-3 mt-2 btn btn-success btn-block\" value=\"Agregar tarea\" />\n\n                </form>\n\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default NuevaTarea;","import React from 'react';\n\nconst Tareas = ({tarea, eliminarTarea}) => {\n    return (\n        <div className=\"card mt-3\">\n            <div className=\"card-body\">\n                <p className=\"card-text\"><span>Nombre de la tarea: </span> {tarea.home}</p>\n                <p className=\"card-text\"><span>Cliente: </span> {tarea.cliente}</p>\n                <p className=\"card-text\"><span>Fecha de entrega: </span> {tarea.fecha}</p>\n                <button\n                    className=\"btn btn-danger\"\n                    onClick={() =>eliminarTarea(tarea.id)}\n                >\n                    Borrar &times;\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default Tareas;","import React, { Fragment } from 'react';\nimport Tarea from './Tareas.js'\n\nconst listaTareas = ({tarea, eliminarTarea}) => {\n\n        // Imprimir un mensaje en base si hay citas o no\n        const mensaje = Object.keys(tarea).length === 0 ? 'No hay tareas' : 'Estas son tus tareas';\n\n        return (\n                <Fragment>\n                        <h3>{mensaje}</h3>\n                        <div className=\"lista-citas\">\n                                {tarea.map(tarea => (\n                                        <Tarea \n                                                key={tarea.id}\n                                                tarea={tarea}\n                                                eliminarTarea={eliminarTarea}\n                                        />\n                                ))}\n                        </div>\n                </Fragment>\n        );\n}\n\nexport default listaTareas;","import React, {Component} from 'react';\nimport './bootstrap.min.css'\nimport Header from './components/Header'\nimport NuevaTarea from './components/NuevaTarea'\nimport ListaTarea from './components/ListaTarea'\n\n\nclass App extends Component {\n\n  state = {\n    tareas: []\n  }\n\n  // para guardar la informacion en el storage\n  componentDidMount() {\n    const tareasLS = localStorage.getItem('tareas');\n    if (tareasLS) {\n      this.setState({\n        tareas : JSON.parse(tareasLS)\n      })\n    }\n  }\n\n  // cuando eliminamos o agregamos una nueva cita\n  componentDidUpdate() {\n    localStorage.setItem('tareas', JSON.stringify(this.state.tareas));\n  }\n\n  crearNuevaTarea = (datos) => {\n    //copiar el state actual\n    const tareas = [...this.state.tareas, datos];\n\n    //agregar el nuevo state\n    this.setState({\n      tareas: tareas\n    })\n\n    //elimina las citas del state\n\n  }\n\n  eliminarTarea = id => {\n    const tareasActuales = [...this.state.tareas];\n\n    const tareas = tareasActuales.filter(tareas => tareas.id !== id)\n\n    this.setState({\n      tareas\n    })\n  }\n\n  render() {\n    return(\n      <div className=\"container\">\n        <Header \n          titulo=\"Listado de tareas\"\n        />\n        <div className=\"row\">\n          <div className=\"col-md-10 mx-auto\">\n            <NuevaTarea \n              crearNuevaTarea = {this.crearNuevaTarea}\n            />\n          </div>\n\n          <div className=\"mt-5 col-md-10 mx-auto\">\n            <ListaTarea\n              tarea={this.state.tareas}\n              eliminarTarea = {this.eliminarTarea}\n            />\n          </div>\n\n      \n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}